// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Asset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Asset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Asset", id.toString(), this);
  }

  static load(id: string): Asset | null {
    return store.get("Asset", id) as Asset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get walletAddress(): string {
    let value = this.get("walletAddress");
    return value.toString();
  }

  set walletAddress(value: string) {
    this.set("walletAddress", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get maxBalance(): BigDecimal {
    let value = this.get("maxBalance");
    return value.toBigDecimal();
  }

  set maxBalance(value: BigDecimal) {
    this.set("maxBalance", Value.fromBigDecimal(value));
  }

  get countIn(): BigInt {
    let value = this.get("countIn");
    return value.toBigInt();
  }

  set countIn(value: BigInt) {
    this.set("countIn", Value.fromBigInt(value));
  }

  get countOut(): BigInt {
    let value = this.get("countOut");
    return value.toBigInt();
  }

  set countOut(value: BigInt) {
    this.set("countOut", Value.fromBigInt(value));
  }

  get countTotal(): BigInt {
    let value = this.get("countTotal");
    return value.toBigInt();
  }

  set countTotal(value: BigInt) {
    this.set("countTotal", Value.fromBigInt(value));
  }

  get amountIn(): BigDecimal {
    let value = this.get("amountIn");
    return value.toBigDecimal();
  }

  set amountIn(value: BigDecimal) {
    this.set("amountIn", Value.fromBigDecimal(value));
  }

  get amountOut(): BigDecimal {
    let value = this.get("amountOut");
    return value.toBigDecimal();
  }

  set amountOut(value: BigDecimal) {
    this.set("amountOut", Value.fromBigDecimal(value));
  }

  get amountTotal(): BigDecimal {
    let value = this.get("amountTotal");
    return value.toBigDecimal();
  }

  set amountTotal(value: BigDecimal) {
    this.set("amountTotal", Value.fromBigDecimal(value));
  }

  get amountAver(): BigDecimal {
    let value = this.get("amountAver");
    return value.toBigDecimal();
  }

  set amountAver(value: BigDecimal) {
    this.set("amountAver", Value.fromBigDecimal(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get aID(): BigInt {
    let value = this.get("aID");
    return value.toBigInt();
  }

  set aID(value: BigInt) {
    this.set("aID", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assets(): Array<string> {
    let value = this.get("assets");
    return value.toStringArray();
  }

  set assets(value: Array<string>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get transactions(): Array<string> | null {
    let value = this.get("transactions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transactions(value: Array<string> | null) {
    if (value === null) {
      this.unset("transactions");
    } else {
      this.set("transactions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get direction(): string {
    let value = this.get("direction");
    return value.toString();
  }

  set direction(value: string) {
    this.set("direction", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenID(): string {
    let value = this.get("tokenID");
    return value.toString();
  }

  set tokenID(value: string) {
    this.set("tokenID", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }
}

export class IDGenerator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IDGenerator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IDGenerator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IDGenerator", id.toString(), this);
  }

  static load(id: string): IDGenerator | null {
    return store.get("IDGenerator", id) as IDGenerator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get aID(): BigInt {
    let value = this.get("aID");
    return value.toBigInt();
  }

  set aID(value: BigInt) {
    this.set("aID", Value.fromBigInt(value));
  }
}

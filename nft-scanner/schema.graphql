"""
Asset stores all high level variables for Token assets this one user holds
"""
type Asset @entity {
    "Owner address + token address"
    id: ID!
    "token contract address"
    contractAddress: String!
    "wallet address"
    walletAddress: String!
    "Name of the Token"
    name: String!
    "Token symbol"
    symbol: String!
    "Token decimals"
    decimals: Int!
    "balance of this token"
    balance: BigDecimal!
    "max balance ever"
    maxBalance: BigDecimal!
    "Number of in-Transfer"
    countIn: BigInt!
    "Number of out-Transfer"
    countOut: BigInt!
    "Number of Transfer totally"
    countTotal: BigInt!
    "in-Transfer amount"
    amountIn: BigDecimal!
    "out-Transfer amount"
    amountOut: BigDecimal!
    "total Transfer amount"
    amountTotal: BigDecimal!
    "average amount per transfer"
    amountAver: BigDecimal!
    "relationship"
    owner: User!
    "help to order when query"
    aID: BigInt!
}

"""
User is a single ethereum address and related information
"""
type User @entity {
    "User wallet address"
    id: ID!
    "assets of the user"
    assets: [Asset!]! @derivedFrom(field: "owner")
    "transaction of the user"
    transactions: [Transaction!] @derivedFrom(field: "owner")
}
"""
Transaction stores all tranfser events for the user of a specific token
"""
type Transaction @entity{
    "id"
     id:ID!
    "date of transfer"
     date: BigInt!
    "transfer direction"
     direction: String!
     "transfer amount"
     amount: BigDecimal!
    "transfer transaction records"
     owner: User!
     "token ID"
     tokenID: String!
    "balance of after this transaction"
     balance: BigDecimal!
     "hash of this block"
     hash: Bytes!
    "outgoing address"
     to: String!
    "incoming address"
     from: String!
}

"""
IDGenerator is used to generate ID with asscending order, ID starts from BigInt(0)
"""
type IDGenerator @entity {
    "id"
    id: ID!
    "asscending ID"
    aID: BigInt!
}
